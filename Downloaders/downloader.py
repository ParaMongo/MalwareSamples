"""
   Copyright (c) 2019 Jack Farley
   This file is part of MalwareSamples
   Usage or distribution of this software/code is subject to the
   terms of the GNU GENERAL PUBLIC LICENSE.
   downloader.py
   ---
"""

from zipfile import ZipFile
import io
import os
import requests

def downloadEncryptZip(url, password, path=None, filename = None):
    """
    Downloads an encrypted ZIP file from the internet, unzips with password into memory or if path is supplied, to path
    :param url: URL to downlaod from
    :param password: Password to open the zip file fith
    :param path: Directory path to download to
    :param filename: Filename to download as
    :return: returns unzipped data in memory

    https://www.quora.com/How-can-I-write-a-Python-program-to-unzip-a-7z-archive-protected-with-a-password


    """
    response = requests.get(url)
    with ZipFile(io.BytesIO(response.content)) as thezip:
        for zipinfo in thezip.infolist():
            with thezip.open(zipinfo, pwd=bytes(password, 'utf-8')) as thefile:
                file_obj = thefile
                unzipped_data = file_obj.read()
                """If chose to download to path, do that here"""
                if path is not None and filename is not None:
                    os.makedirs(path)
                    with open(os.path.join(path, filename), "w") as aFile:
                        aFile.write(unzipped_data)
                    return None


                else:
                    """If chose to return data in memory, do that here"""
                    return unzipped_data


def downloadZip(url, path=None, filename = None):
    """
    Downloads ZIP file from the internet, unzips into memory or if path is supplied, to path
    :param url: URL to downlaod from
    :param path: Directory path to download to
    :param filename: Filename to download as
    :return:
    """
    response = requests.get(url)
    with ZipFile(io.BytesIO(response.content)) as thezip:
        for zipinfo in thezip.infolist():
            with thezip.open(zipinfo) as thefile:
                file_obj =  thefile
                unzipped_data = file_obj.read()

                """If chose to download to path, do that here"""
                if path is not None and filename is not None:
                    os.makedirs(path)
                    with open(os.path.join(path, filename), "w") as aFile:
                        aFile.write(unzipped_data)
                    return None


                else:
                    """If chose to return data in memory, do that here"""
                    return unzipped_data






if __name__ == "__main__":
    downloadEncryptZipMem(" http://34.194.253.132/wp-content/uploads/2019/09/adobe.zip", "infected", "C:\\Users\\jfarl\\Desktop", "malware.exe")